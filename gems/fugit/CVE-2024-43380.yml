---
gem: fugit
cve: 2024-43380
ghsa: 2m96-52r3-2f3g
url: https://github.com/floraison/fugit/security/advisories/GHSA-2m96-52r3-2f3g
title: fugit parse and parse_nat stall on lengthy input
date: 2024-08-19
description: |
  ### Impact

  The fugit "natural" parser, that turns "every wednesday at 5pm" into "0 17 * * 3", accepted any length of input and went on attempting to parse it, not returning promptly, as expected. The parse call could hold the thread with no end in sight.

  Fugit dependents that do not check (user) input length for plausability are impacted.

  ### Patches

  Problem was reported in #104 and the fix was released in [fugit 1.11.1](https://rubygems.org/gems/fugit/versions/1.11.1)

  ### Workarounds

  By making sure that `Fugit.parse(s)`, `Fugit.do_parse(s)`, `Fugit.parse_nat(s)`, `Fugit.do_parse_nat(s)`, `Fugit::Nat.parse(s)`, and `Fugit::Nat.do_parse(s)` are not fed strings too long. 1000 chars feels ok, while 10_000 chars makes it stall.

  In fewer words, making sure those fugit methods are not fed unvetted input strings.

  ### References

  gh-104
cvss_v3: 5.3
unaffected_versions:
- "<OPTIONAL: FILL IN SEE BELOW>"
patched_versions:
- "<FILL IN SEE BELOW>"


# GitHub advisory data below - **Remove this data before committing**
# Use this data to write patched_versions (and potentially unaffected_versions) above
---
identifiers:
- type: GHSA
  value: GHSA-2m96-52r3-2f3g
- type: CVE
  value: CVE-2024-43380
summary: fugit parse and parse_nat stall on lengthy input
description: |
  ### Impact

  The fugit "natural" parser, that turns "every wednesday at 5pm" into "0 17 * * 3", accepted any length of input and went on attempting to parse it, not returning promptly, as expected. The parse call could hold the thread with no end in sight.

  Fugit dependents that do not check (user) input length for plausability are impacted.

  ### Patches

  Problem was reported in #104 and the fix was released in [fugit 1.11.1](https://rubygems.org/gems/fugit/versions/1.11.1)

  ### Workarounds

  By making sure that `Fugit.parse(s)`, `Fugit.do_parse(s)`, `Fugit.parse_nat(s)`, `Fugit.do_parse_nat(s)`, `Fugit::Nat.parse(s)`, and `Fugit::Nat.do_parse(s)` are not fed strings too long. 1000 chars feels ok, while 10_000 chars makes it stall.

  In fewer words, making sure those fugit methods are not fed unvetted input strings.

  ### References

  gh-104
severity: MODERATE
cvss:
  score: 5.3
  vectorString: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
references:
- url: https://github.com/floraison/fugit/security/advisories/GHSA-2m96-52r3-2f3g
- url: https://nvd.nist.gov/vuln/detail/CVE-2024-43380
- url: https://github.com/floraison/fugit/issues/104
- url: https://github.com/floraison/fugit/commit/ad2c1c9c737213d585fff0b51c927d178b2c05a5
- url: https://github.com/advisories/GHSA-2m96-52r3-2f3g
publishedAt: '2024-08-19T17:29:36Z'
withdrawnAt: 
vulnerabilities:
- package:
    name: fugit
    ecosystem: RUBYGEMS
  vulnerableVersionRange: "< 1.11.1"
  firstPatchedVersion:
    identifier: 1.11.1
