---
gem: activerecord
cve: 2023-22794
ghsa: hq7p-j377-6v63
url: https://github.com/rails/rails/releases/tag/v7.0.4.1
title: SQL Injection Vulnerability via ActiveRecord comments
date: 2023-01-18
description: |-
  There is a possible vulnerability in ActiveRecord related to the sanitization of comments. This vulnerability has been assigned the CVE identifier CVE-2023-22794.

  Versions Affected: >= 6.0.0 Not affected: < 6.0.0 Fixed Versions: 6.0.6.1, 6.1.7.1, 7.0.4.1
  Impact

  Previously the implementation of escaping for comments was insufficient for

  If malicious user input is passed to either the annotate query method, the optimizer_hints query method, or through the QueryLogs interface which automatically adds annotations, it may be sent to the database with insufficient sanitization and be able to inject SQL outside of the comment.

  In most cases these interfaces won’t be used with user input and users should avoid doing so.

  Example vulnerable code:
  ```
  Post.where(id: 1).annotate("#{params[:user_input]}")

  Post.where(id: 1).optimizer_hints("#{params[:user_input]}")
  ```
  Example vulnerable QueryLogs configuration (the default configuration is not vulnerable):
  ```
  config.active_record.query_log_tags = [
    {
      something: -> { <some value including user input> }
    }
  ]
  ```
  All users running an affected release should either upgrade or use one of the workarounds immediately.
  Releases

  The FIXED releases are available at the normal locations.
  Workarounds

  Avoid passing user input to annotate and avoid using QueryLogs configuration which can include user input.
  Patches

  To aid users who aren’t able to upgrade immediately we have provided patches for the two supported release series. They are in git-am format and consist of a single changeset.

      6-0-Make-sanitize_as_sql_comment-more-strict.patch - Patch for 6.0 series
      6-1-Make-sanitize_as_sql_comment-more-strict.patch - Patch for 6.1 series
      7-0-Make-sanitize_as_sql_comment-more-strict.patch - Patch for 7.0 series

  Please note that only the 7.0.Z and 6.1.Z series are supported at present, and 6.0.Z for severe vulnerabilities. Users of earlier unsupported releases are advised to upgrade as soon as possible as we cannot guarantee the continued availability of security fixes for unsupported releases.
unaffected_versions:
- "<OPTIONAL: FILL IN SEE BELOW>"
patched_versions:
- "<FILL IN SEE BELOW>"


# GitHub advisory data below - **Remove this data before committing**
# Use this data to write patched_versions (and potentially unaffected_versions) above
---
identifiers:
- type: GHSA
  value: GHSA-hq7p-j377-6v63
- type: CVE
  value: CVE-2023-22794
summary: SQL Injection Vulnerability via ActiveRecord comments
description: |-
  There is a possible vulnerability in ActiveRecord related to the sanitization of comments. This vulnerability has been assigned the CVE identifier CVE-2023-22794.

  Versions Affected: >= 6.0.0 Not affected: < 6.0.0 Fixed Versions: 6.0.6.1, 6.1.7.1, 7.0.4.1
  Impact

  Previously the implementation of escaping for comments was insufficient for

  If malicious user input is passed to either the annotate query method, the optimizer_hints query method, or through the QueryLogs interface which automatically adds annotations, it may be sent to the database with insufficient sanitization and be able to inject SQL outside of the comment.

  In most cases these interfaces won’t be used with user input and users should avoid doing so.

  Example vulnerable code:
  ```
  Post.where(id: 1).annotate("#{params[:user_input]}")

  Post.where(id: 1).optimizer_hints("#{params[:user_input]}")
  ```
  Example vulnerable QueryLogs configuration (the default configuration is not vulnerable):
  ```
  config.active_record.query_log_tags = [
    {
      something: -> { <some value including user input> }
    }
  ]
  ```
  All users running an affected release should either upgrade or use one of the workarounds immediately.
  Releases

  The FIXED releases are available at the normal locations.
  Workarounds

  Avoid passing user input to annotate and avoid using QueryLogs configuration which can include user input.
  Patches

  To aid users who aren’t able to upgrade immediately we have provided patches for the two supported release series. They are in git-am format and consist of a single changeset.

      6-0-Make-sanitize_as_sql_comment-more-strict.patch - Patch for 6.0 series
      6-1-Make-sanitize_as_sql_comment-more-strict.patch - Patch for 6.1 series
      7-0-Make-sanitize_as_sql_comment-more-strict.patch - Patch for 7.0 series

  Please note that only the 7.0.Z and 6.1.Z series are supported at present, and 6.0.Z for severe vulnerabilities. Users of earlier unsupported releases are advised to upgrade as soon as possible as we cannot guarantee the continued availability of security fixes for unsupported releases.
severity: HIGH
cvss:
  score: 0.0
  vectorString: 
references:
- url: https://github.com/rails/rails/releases/tag/v7.0.4.1
- url: https://github.com/rails/rails/commit/d7aba06953f9fa789c411676b941d20df8ef73de
- url: https://github.com/advisories/GHSA-hq7p-j377-6v63
publishedAt: '2023-01-18T18:20:19Z'
withdrawnAt: 
vulnerabilities:
- package:
    name: activerecord
    ecosystem: RUBYGEMS
  vulnerableVersionRange: ">= 7.0.0, < 7.0.4.1"
  firstPatchedVersion:
    identifier: 7.0.4.1
- package:
    name: activerecord
    ecosystem: RUBYGEMS
  vulnerableVersionRange: ">= 6.1.0, < 6.1.7.1"
  firstPatchedVersion:
    identifier: 6.1.7.1
- package:
    name: activerecord
    ecosystem: RUBYGEMS
  vulnerableVersionRange: ">= 6.0.0, < 6.0.6.1"
  firstPatchedVersion:
    identifier: 6.0.6.1
