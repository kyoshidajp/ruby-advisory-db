---
gem: rails-html-sanitizer
cve: 2022-32209
ghsa: pg8v-g4xq-hww9
url: https://hackerone.com/reports/1530898
title: Rails::Html::Sanitizer vulnerable to Cross-site Scripting
date: 2022-06-25
description: "Versions of Rails::Html::Sanitizer prior to version 1.4.3 are vulnerable
  to XSS with certain configurations of Rails::Html::Sanitizer which  allows an attacker
  to inject content when the application developer has overridden the sanitizer's
  allowed tags to allow both `select` and `style` elements. Code is only impacted
  if allowed tags are being overridden. \n\nThis may be done via application configuration:
  ```ruby# In config/application.rbconfig.action_view.sanitized_allowed_tags = [\"select\",
  \"style\"]```\n\nsee https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\nOr
  it may be done with a `:tags` option to the Action View helper `sanitize`: ```<%=
  sanitize @comment.body, tags: [\"select\", \"style\"] %>``` \n\nsee https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize
  \n\nIt may also be done with Rails::Html::SafeListSanitizer directly: \n```ruby#
  class-level optionRails::Html::SafeListSanitizer.allowed_tags = [\"select\", \"style\"]```
  \ or with\n```ruby# instance-level optionRails::Html::SafeListSanitizer.new.sanitize(@article.body,
  tags: [\"select\", \"style\"])```\n\nAll users overriding the allowed tags by any
  of the above mechanisms to include both \"select\" and \"style\" are recommended
  to upgrade immediately. A workaround for this issue can be applied by removing either
  `select` or `style` from the overridden allowed tags."
cvss_v3: 6.1
unaffected_versions:
- "<OPTIONAL: FILL IN SEE BELOW>"
patched_versions:
- "<FILL IN SEE BELOW>"
