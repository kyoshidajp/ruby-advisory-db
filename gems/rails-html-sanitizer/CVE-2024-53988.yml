---
gem: rails-html-sanitizer
cve: 2024-53988
ghsa: cfjx-w229-hgx5
url: https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-cfjx-w229-hgx5
title: rails-html-sanitizer has XSS vulnerability with certain configurations
date: 2024-12-02
description: |
  ## Summary

  There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0.

  * Versions affected: 1.6.0
  * Not affected: < 1.6.0
  * Fixed versions: 1.6.1

  ## Impact

  A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in the following way:

  - the "math", "mtext", "table", and "style" elements are allowed
  - and either "mglyph" or "malignmark" are allowed

  Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor) and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor) for more information on these configuration options.

  The default configuration is to disallow all of these elements except for "table". Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:

  1. using application configuration to configure Action View sanitizers' allowed tags:

    ```ruby
    # In config/application.rb
    config.action_view.sanitized_allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
    # or
    config.action_view.sanitized_allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
    ```

    see https://guides.rubyonrails.org/configuring.html#configuring-action-view

  2. using a `:tags` option to the Action View helper `sanitize`:

    ```
    <%= sanitize @comment.body, tags: ["math", "mtext", "table", "style", "mglyph"] %>
    <%# or %>
    <%= sanitize @comment.body, tags: ["math", "mtext", "table", "style", "malignmark"] %>
    ```

    see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize

  3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:

    ```ruby
    # class-level option
    Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
    # or
    Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
    ```

    (note that this class may also be referenced as `Rails::Html::SafeListSanitizer`)

  4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer instance method `sanitize`:

    ```ruby
    # instance-level option
    Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "mtext", "table", "style", "mglyph"])
    # or
    Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "mtext", "table", "style", "malignmark"])
    ```

    (note that this class may also be referenced as `Rails::Html::SafeListSanitizer`)

  5. setting ActionText::ContentHelper module attribute `allowed_tags`:

    ```ruby
    ActionText::ContentHelper.allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
    # or
    ActionText::ContentHelper.allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
    ```

  All users overriding the allowed tags by any of the above mechanisms to include ("math" and "mtext" and "table" and "style" and ("mglyph" or "malignmark")) should either upgrade or use one of the workarounds.


  ## Workarounds

  Any one of the following actions will work around this issue:

  - Remove "mglyph" and "malignmark" from the overridden allowed tags,
  - Or, downgrade sanitization to HTML4 (see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor) and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor) for more information).


  ## References

  - [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)
  - Original report: https://hackerone.com/reports/2519936

  ## Credit

  This vulnerability was responsibly reported by So Sakaguchi (mokusou).
unaffected_versions:
- "<OPTIONAL: FILL IN SEE BELOW>"
patched_versions:
- "<FILL IN SEE BELOW>"


# GitHub advisory data below - **Remove this data before committing**
# Use this data to write patched_versions (and potentially unaffected_versions) above
---
identifiers:
- type: GHSA
  value: GHSA-cfjx-w229-hgx5
- type: CVE
  value: CVE-2024-53988
summary: rails-html-sanitizer has XSS vulnerability with certain configurations
description: |
  ## Summary

  There is a possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer 1.6.0 when used with Rails >= 7.1.0.

  * Versions affected: 1.6.0
  * Not affected: < 1.6.0
  * Fixed versions: 1.6.1

  ## Impact

  A possible XSS vulnerability with certain configurations of Rails::HTML::Sanitizer may allow an attacker to inject content if HTML5 sanitization is enabled and the application developer has overridden the sanitizer's allowed tags in the following way:

  - the "math", "mtext", "table", and "style" elements are allowed
  - and either "mglyph" or "malignmark" are allowed

  Code is only impacted if Rails is configured to use HTML5 sanitization, please see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor) and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor) for more information on these configuration options.

  The default configuration is to disallow all of these elements except for "table". Code is only impacted if allowed tags are being overridden. Applications may be doing this in a few different ways:

  1. using application configuration to configure Action View sanitizers' allowed tags:

    ```ruby
    # In config/application.rb
    config.action_view.sanitized_allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
    # or
    config.action_view.sanitized_allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
    ```

    see https://guides.rubyonrails.org/configuring.html#configuring-action-view

  2. using a `:tags` option to the Action View helper `sanitize`:

    ```
    <%= sanitize @comment.body, tags: ["math", "mtext", "table", "style", "mglyph"] %>
    <%# or %>
    <%= sanitize @comment.body, tags: ["math", "mtext", "table", "style", "malignmark"] %>
    ```

    see https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize

  3. setting Rails::HTML5::SafeListSanitizer class attribute `allowed_tags`:

    ```ruby
    # class-level option
    Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
    # or
    Rails::HTML5::SafeListSanitizer.allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
    ```

    (note that this class may also be referenced as `Rails::Html::SafeListSanitizer`)

  4. using a `:tags` options to the Rails::HTML5::SafeListSanitizer instance method `sanitize`:

    ```ruby
    # instance-level option
    Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "mtext", "table", "style", "mglyph"])
    # or
    Rails::HTML5::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "mtext", "table", "style", "malignmark"])
    ```

    (note that this class may also be referenced as `Rails::Html::SafeListSanitizer`)

  5. setting ActionText::ContentHelper module attribute `allowed_tags`:

    ```ruby
    ActionText::ContentHelper.allowed_tags = ["math", "mtext", "table", "style", "mglyph"]
    # or
    ActionText::ContentHelper.allowed_tags = ["math", "mtext", "table", "style", "malignmark"]
    ```

  All users overriding the allowed tags by any of the above mechanisms to include ("math" and "mtext" and "table" and "style" and ("mglyph" or "malignmark")) should either upgrade or use one of the workarounds.


  ## Workarounds

  Any one of the following actions will work around this issue:

  - Remove "mglyph" and "malignmark" from the overridden allowed tags,
  - Or, downgrade sanitization to HTML4 (see documentation for [`config.action_view.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-view-sanitizer-vendor) and [`config.action_text.sanitizer_vendor`](https://guides.rubyonrails.org/configuring.html#config-action-text-sanitizer-vendor) for more information).


  ## References

  - [CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)
  - Original report: https://hackerone.com/reports/2519936

  ## Credit

  This vulnerability was responsibly reported by So Sakaguchi (mokusou).
severity: LOW
cvss:
  score: 0.0
  vectorString: 
references:
- url: https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-cfjx-w229-hgx5
- url: https://nvd.nist.gov/vuln/detail/CVE-2024-53988
- url: https://github.com/rails/rails-html-sanitizer/commit/a0a3e8b76b696446ffc6bffcff3bc7b7c6393c72
- url: https://github.com/advisories/GHSA-cfjx-w229-hgx5
publishedAt: '2024-12-02T21:48:42Z'
withdrawnAt: 
vulnerabilities:
- package:
    name: rails-html-sanitizer
    ecosystem: RUBYGEMS
  vulnerableVersionRange: "= 1.6.0"
  firstPatchedVersion:
    identifier: 1.6.1
